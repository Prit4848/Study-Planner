<%- include('./partials/header') %>
<div class="container mx-auto p-4">
  <h1 class="text-2xl font-bold mb-4">Study Plan Tracker</h1>
  <div class="flex flex-wrap -mx-4">
    <div class="w-full md:w-1/2 p-4">
      <div class="bg-white p-4 rounded-lg shadow-md mt-32">
        <canvas id="planChart"></canvas>
      </div>
    </div>
    <div class="w-full md:w-1/2 p-4">
      <div class="bg-white p-4 rounded-lg shadow-md">
        <canvas id="completionPieChart"></canvas>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const ctxLine = document.getElementById('planChart').getContext('2d');
    const ctxPie = document.getElementById('completionPieChart').getContext('2d');
    const plans = <%- JSON.stringify(plans) %>;

    // Format the date as MM/DD/YYYY
    const formatDate = (dateString) => {
      const options = { year: 'numeric', month: '2-digit', day: '2-digit' };
      return new Date(dateString).toLocaleDateString(undefined, options);
    };

    const labels = plans.map(plan => `${plan.title}\n${formatDate(plan.date)}`);
    const completionData = plans.map(plan => {
      const totalTasks = plan.tasks.length;
      const completedTasks = plan.tasks.filter(task => task.completed).length;
      return totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;
    });

    // Data for line chart
    const lineData = {
      labels: labels,
      datasets: [{
        label: 'Task Completion',
        data: completionData,
        backgroundColor: plans.map((_, index) => `rgba(${Math.floor(255 - 42.5 * index)}, ${Math.floor(99 + 50 * index)}, ${Math.floor(132 + 33 * index)}, 0.2)`),
        borderColor: plans.map((_, index) => `rgba(${Math.floor(255 - 42.5 * index)}, ${Math.floor(99 + 50 * index)}, ${Math.floor(132 + 33 * index)}, 1)`),
        borderWidth: 1,
        fill: false,
        tension: 0.1
      }]
    };

    // Configuration for line chart
    const lineConfig = {
      type: 'line',
      data: lineData,
      options: {
        scales: {
          y: {
            beginAtZero: true,
            max: 100,
            ticks: {
              callback: function(value) {
                return value + '%';
              }
            }
          }
        },
        plugins: {
          tooltip: {
            callbacks: {
              label: function(context) {
                return context.parsed.y.toFixed(2) + '%';
              }
            }
          }
        }
      }
    };

    const planChart = new Chart(ctxLine, lineConfig);

    // Calculate total completed and not completed tasks
    let totalTasks = 0;
    let completedTasks = 0;
    plans.forEach(plan => {
      totalTasks += plan.tasks.length;
      completedTasks += plan.tasks.filter(task => task.completed).length;
    });
    const notCompletedTasks = totalTasks - completedTasks;

    // Data for pie chart
    const pieData = {
      labels: ['Completed', 'Not Completed'],
      datasets: [{
        data: [completedTasks, notCompletedTasks],
        backgroundColor: ['rgba(75, 192, 192, 0.2)', 'rgba(255, 99, 132, 0.2)'],
        borderColor: ['rgba(75, 192, 192, 1)', 'rgba(255, 99, 132, 1)'],
        borderWidth: 1
      }]
    };

    // Configuration for pie chart
    const pieConfig = {
      type: 'pie',
      data: pieData,
      options: {
        plugins: {
          tooltip: {
            callbacks: {
              label: function(context) {
                const label = context.label || '';
                const value = context.raw;
                const total = context.chart._metasets[context.datasetIndex].total;
                const percentage = ((value / total) * 100).toFixed(2);
                return `${label}: ${percentage}% (${value})`;
              }
            }
          }
        }
      }
    };

    const completionPieChart = new Chart(ctxPie, pieConfig);
  });
</script>

<%- include('./partials/footer') %>
