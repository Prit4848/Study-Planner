<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Plan Tracker</title>
  <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>
<body class="bg-gray-100">
  <%- include('./partials/header') %>
  <div class="container mx-auto p-4">
    <h1 class="text-2xl font-bold mb-4">Study Plan Tracker</h1>
    <div class="bg-white p-4 rounded-lg shadow-md">
      <canvas id="planChart"></canvas>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const ctx = document.getElementById('planChart').getContext('2d');
      const plans = <%- JSON.stringify(plans) %>;

      // Format the date as MM/DD/YYYY
      const formatDate = (dateString) => {
        const options = { year: 'numeric', month: '2-digit', day: '2-digit' };
        return new Date(dateString).toLocaleDateString(undefined, options);
      };

      const labels = plans.map(plan => `${plan.title}\n${formatDate(plan.date)}`);
      const data = {
        labels: labels,
        datasets: [{
          label: 'Task Completion',
          data: plans.map(plan => {
            const totalTasks = plan.tasks.length;
            const completedTasks = plan.tasks.filter(task => task.completed).length;
            return totalTasks > 0 ? (completedTasks / totalTasks) * 100 : 0;
          }),
          backgroundColor: plans.map((_, index) => `rgba(${Math.floor(255 - 42.5 * index)}, ${Math.floor(99 + 50 * index)}, ${Math.floor(132 + 33 * index)}, 0.2)`),
          borderColor: plans.map((_, index) => `rgba(${Math.floor(255 - 42.5 * index)}, ${Math.floor(99 + 50 * index)}, ${Math.floor(132 + 33 * index)}, 1)`),
          borderWidth: 1,
          fill: false,
          tension: 0.1
        }]
      };

      const config = {
        type: 'line',
        data: data,
        options: {
          scales: {
            y: {
              beginAtZero: true,
              max: 100,
              ticks: {
                callback: function(value) {
                  return value + '%';
                }
              }
            }
          },
          plugins: {
            tooltip: {
              callbacks: {
                label: function(context) {
                  return context.parsed.y.toFixed(2) + '%';
                }
              }
            }
          }
        }
      };

      const planChart = new Chart(ctx, config);
    });
  </script>

  <%- include('./partials/footer') %>
</body>
</html>
